DUMB IDEA
=========

This is a dumb idea I had before I realized that just blitting was going to take up all 
my goddamn cycles.  It is preserved purely for posterities sake, and so everyone can 
laugh at me.

If we represent a 2d point as a single number where p = x * K | y, then Vector addition 
can be performed by adding the number value scaling can be performed by multiplying the 
only problem could be overflow. This could be avoided (but not guaranteed) by using a 
really large MAX\_Y ... or by checking for overflow, although checking on each operation 
would probably be as slow as representing them as {x, y}, which would be simpler

        var MAX_Y = Math.sqrt(Number.MAX_VALUE), // this number is probably too big
            INV_MAX_Y = 1 / MAX_Y;

        function makePoint(x, y) {
            return x * MAX_Y + y;
        }

        function getX(p) {
            return p % INV_MAX_Y;
        }

        function getY(p) {
            // equiv to Math.floor(p * MAX_Y);
            return ~~(p * MAX_Y);
        }

        function Rect(origin, width, height) {
            this.origin = origin;
            this.width = width;
            this.height = height;
            this.limit = origin + makePoint(width, height);
        }

        Rect.prototype.doesContain = function (p) {
            var diff;

            if (p < this.origin || p > this.limit) {
                return false;
            }

            diff = getY(p) - getY(this.origin);

            return  this.diff > 0 && diff < this.width;
        };

        Rect.prototype.doesOverlap = function (r) {
            var diff;

            if (r.origin + r.height < this.origin ||
                this.origin + this.height < r.origin) {
                return false;
            }
            
            diff = r.origin - this.origin;

            return diff < r.width && diff < this.width;
        };
